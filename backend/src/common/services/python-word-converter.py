#!/usr/bin/env python3
"""
Python service for converting document chunks to Word format using python-docx
"""

import sys
import json
import argparse
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.shared import OxmlElement, qn

def create_word_document(chunks_data):
    """
    Create a Word document from document chunks
    """
    # Create a new Document
    doc = Document()
    
    # Set document properties
    doc.core_properties.title = "Legal Document"
    doc.core_properties.author = "Legal Document System"
    doc.core_properties.subject = "Converted from Legal Document System"
    
    # Add title
    title = doc.add_heading('Legal Document', 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Add a separator line
    doc.add_paragraph("=" * 50)
    
    # Process each chunk
    for i, chunk in enumerate(chunks_data):
        # Add chunk header
        chunk_header = doc.add_heading(f'Section {i + 1}', level=2)
        
        # Add chunk content
        paragraph = doc.add_paragraph()
        
        # Split text into sentences for better formatting
        sentences = chunk.get('chunkText', '').split('. ')
        for j, sentence in enumerate(sentences):
            if sentence.strip():
                if j > 0:
                    paragraph.add_run(sentence.strip() + '. ')
                else:
                    paragraph.add_run(sentence.strip() + '. ')
        
        # Add chunk metadata if available
        if chunk.get('metadata'):
            metadata = chunk.get('metadata', {})
            if metadata.get('chunkIndex'):
                meta_para = doc.add_paragraph()
                meta_para.add_run(f"Chunk Index: {metadata.get('chunkIndex')}").italic = True
                
            if metadata.get('tokenCount'):
                meta_para = doc.add_paragraph()
                meta_para.add_run(f"Token Count: {metadata.get('tokenCount')}").italic = True
        
        # Add spacing between chunks
        doc.add_paragraph()
    
    # Add footer with conversion info
    doc.add_paragraph("=" * 50)
    footer_para = doc.add_paragraph()
    footer_para.add_run("Generated by Legal Document System").italic = True
    footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    return doc

def convert_chunks_to_word(chunks_json):
    """
    Convert chunks JSON to Word document
    """
    try:
        # Parse chunks data
        chunks_data = json.loads(chunks_json)
        
        # Create Word document
        doc = create_word_document(chunks_data)
        
        # Save to temporary file
        temp_filename = f"/tmp/word_document_{hash(chunks_json) % 10000}.docx"
        doc.save(temp_filename)
        
        # Read the file and return as bytes
        with open(temp_filename, 'rb') as f:
            word_bytes = f.read()
        
        # Clean up temporary file
        import os
        os.remove(temp_filename)
        
        return word_bytes
        
    except Exception as e:
        print(f"Error converting chunks to Word: {str(e)}", file=sys.stderr)
        sys.exit(1)

def main():
    """
    Main function to handle command line arguments
    """
    parser = argparse.ArgumentParser(description='Convert document chunks to Word format')
    parser.add_argument('--chunks', required=True, help='JSON string containing chunks data')
    parser.add_argument('--output', help='Output file path (optional)')
    
    args = parser.parse_args()
    
    try:
        # Convert chunks to Word
        word_bytes = convert_chunks_to_word(args.chunks)
        
        if args.output:
            # Save to file
            with open(args.output, 'wb') as f:
                f.write(word_bytes)
            print(f"Word document saved to: {args.output}")
        else:
            # Output to stdout as base64
            import base64
            word_b64 = base64.b64encode(word_bytes).decode('utf-8')
            print(word_b64)
            
    except Exception as e:
        print(f"Error: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()

